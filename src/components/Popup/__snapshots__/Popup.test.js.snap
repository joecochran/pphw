// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Popup> closes popup 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Popup
    handleStepUpdate={[Function]}
    step={5}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="c-popup__container"
      >
        <button
          className="c-popup__close"
          onClick={[Function]}
          type="button"
        />
        <div
          className="c-popup__title"
        >
          Alright let's set up a couple more
        </div>
        <div
          className="c-popup__content"
        >
          Once they're added, you can share out your roadmap with your team.
        </div>
        <Popup
          content="Got it"
          handleClick={[Function]}
        />
      </div>,
      "className": "c-popup is-hidden c-popup--bar-steps",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />,
          false,
          <div
            className="c-popup__title"
          >
            Alright let's set up a couple more
          </div>,
          <div
            className="c-popup__content"
          >
            Once they're added, you can share out your roadmap with your team.
          </div>,
          false,
          <Popup
            content="Got it"
            handleClick={[Function]}
          />,
        ],
        "className": "c-popup__container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "c-popup__close",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Alright let's set up a couple more",
            "className": "c-popup__title",
          },
          "ref": null,
          "rendered": "Alright let's set up a couple more",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Once they're added, you can share out your roadmap with your team.",
            "className": "c-popup__content",
          },
          "ref": null,
          "rendered": "Once they're added, you can share out your roadmap with your team.",
          "type": "div",
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": "Got it",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="c-popup__container"
        >
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />
          <div
            className="c-popup__title"
          >
            Alright let's set up a couple more
          </div>
          <div
            className="c-popup__content"
          >
            Once they're added, you can share out your roadmap with your team.
          </div>
          <Popup
            content="Got it"
            handleClick={[Function]}
          />
        </div>,
        "className": "c-popup is-hidden c-popup--bar-steps",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="c-popup__close"
              onClick={[Function]}
              type="button"
            />,
            false,
            <div
              className="c-popup__title"
            >
              Alright let's set up a couple more
            </div>,
            <div
              className="c-popup__content"
            >
              Once they're added, you can share out your roadmap with your team.
            </div>,
            false,
            <Popup
              content="Got it"
              handleClick={[Function]}
            />,
          ],
          "className": "c-popup__container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "c-popup__close",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Alright let's set up a couple more",
              "className": "c-popup__title",
            },
            "ref": null,
            "rendered": "Alright let's set up a couple more",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Once they're added, you can share out your roadmap with your team.",
              "className": "c-popup__content",
            },
            "ref": null,
            "rendered": "Once they're added, you can share out your roadmap with your team.",
            "type": "div",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "content": "Got it",
              "handleClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Popup> matches initial snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Popup
    handleStepUpdate={[Function]}
    step="0"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="c-popup__container"
      >
        <button
          className="c-popup__close"
          onClick={[Function]}
          type="button"
        />
        <img
          alt=""
          className="c-popup__image"
          src="add-lane.svg"
        />
        <div
          className="c-popup__title"
        >
          We'll start with a lane
        </div>
        <div
          className="c-popup__content"
        >
          Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
        </div>
        <div
          className="c-popup__action"
        >
          Drag and drop a lane to get started
        </div>
        <Popup
          content="Got it"
          handleClick={[Function]}
        />
      </div>,
      "className": "c-popup is-hidden",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />,
          <img
            alt=""
            className="c-popup__image"
            src="add-lane.svg"
          />,
          <div
            className="c-popup__title"
          >
            We'll start with a lane
          </div>,
          <div
            className="c-popup__content"
          >
            Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
          </div>,
          <div
            className="c-popup__action"
          >
            Drag and drop a lane to get started
          </div>,
          <Popup
            content="Got it"
            handleClick={[Function]}
          />,
        ],
        "className": "c-popup__container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "c-popup__close",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "",
            "className": "c-popup__image",
            "src": "add-lane.svg",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "We'll start with a lane",
            "className": "c-popup__title",
          },
          "ref": null,
          "rendered": "We'll start with a lane",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
            "className": "c-popup__content",
          },
          "ref": null,
          "rendered": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Drag and drop a lane to get started",
            "className": "c-popup__action",
          },
          "ref": null,
          "rendered": "Drag and drop a lane to get started",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": "Got it",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="c-popup__container"
        >
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />
          <img
            alt=""
            className="c-popup__image"
            src="add-lane.svg"
          />
          <div
            className="c-popup__title"
          >
            We'll start with a lane
          </div>
          <div
            className="c-popup__content"
          >
            Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
          </div>
          <div
            className="c-popup__action"
          >
            Drag and drop a lane to get started
          </div>
          <Popup
            content="Got it"
            handleClick={[Function]}
          />
        </div>,
        "className": "c-popup is-hidden",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="c-popup__close"
              onClick={[Function]}
              type="button"
            />,
            <img
              alt=""
              className="c-popup__image"
              src="add-lane.svg"
            />,
            <div
              className="c-popup__title"
            >
              We'll start with a lane
            </div>,
            <div
              className="c-popup__content"
            >
              Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
            </div>,
            <div
              className="c-popup__action"
            >
              Drag and drop a lane to get started
            </div>,
            <Popup
              content="Got it"
              handleClick={[Function]}
            />,
          ],
          "className": "c-popup__container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "c-popup__close",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "",
              "className": "c-popup__image",
              "src": "add-lane.svg",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "We'll start with a lane",
              "className": "c-popup__title",
            },
            "ref": null,
            "rendered": "We'll start with a lane",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
              "className": "c-popup__content",
            },
            "ref": null,
            "rendered": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Drag and drop a lane to get started",
              "className": "c-popup__action",
            },
            "ref": null,
            "rendered": "Drag and drop a lane to get started",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "content": "Got it",
              "handleClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Popup> renders on each step 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Popup
    handleStepUpdate={[Function]}
    step={1}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="c-popup__container"
      >
        <button
          className="c-popup__close"
          onClick={[Function]}
          type="button"
        />
        <img
          alt=""
          className="c-popup__image"
          src="add-lane.svg"
        />
        <div
          className="c-popup__title"
        >
          We'll start with a lane
        </div>
        <div
          className="c-popup__content"
        >
          Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
        </div>
        <div
          className="c-popup__action"
        >
          Drag and drop a lane to get started
        </div>
        <Popup
          content="Got it"
          handleClick={[Function]}
        />
      </div>,
      "className": "c-popup is-hidden",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />,
          <img
            alt=""
            className="c-popup__image"
            src="add-lane.svg"
          />,
          <div
            className="c-popup__title"
          >
            We'll start with a lane
          </div>,
          <div
            className="c-popup__content"
          >
            Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
          </div>,
          <div
            className="c-popup__action"
          >
            Drag and drop a lane to get started
          </div>,
          <Popup
            content="Got it"
            handleClick={[Function]}
          />,
        ],
        "className": "c-popup__container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "c-popup__close",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "",
            "className": "c-popup__image",
            "src": "add-lane.svg",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "We'll start with a lane",
            "className": "c-popup__title",
          },
          "ref": null,
          "rendered": "We'll start with a lane",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
            "className": "c-popup__content",
          },
          "ref": null,
          "rendered": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Drag and drop a lane to get started",
            "className": "c-popup__action",
          },
          "ref": null,
          "rendered": "Drag and drop a lane to get started",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": "Got it",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="c-popup__container"
        >
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />
          <img
            alt=""
            className="c-popup__image"
            src="add-lane.svg"
          />
          <div
            className="c-popup__title"
          >
            We'll start with a lane
          </div>
          <div
            className="c-popup__content"
          >
            Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
          </div>
          <div
            className="c-popup__action"
          >
            Drag and drop a lane to get started
          </div>
          <Popup
            content="Got it"
            handleClick={[Function]}
          />
        </div>,
        "className": "c-popup is-hidden",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="c-popup__close"
              onClick={[Function]}
              type="button"
            />,
            <img
              alt=""
              className="c-popup__image"
              src="add-lane.svg"
            />,
            <div
              className="c-popup__title"
            >
              We'll start with a lane
            </div>,
            <div
              className="c-popup__content"
            >
              Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
            </div>,
            <div
              className="c-popup__action"
            >
              Drag and drop a lane to get started
            </div>,
            <Popup
              content="Got it"
              handleClick={[Function]}
            />,
          ],
          "className": "c-popup__container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "c-popup__close",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "",
              "className": "c-popup__image",
              "src": "add-lane.svg",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "We'll start with a lane",
              "className": "c-popup__title",
            },
            "ref": null,
            "rendered": "We'll start with a lane",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
              "className": "c-popup__content",
            },
            "ref": null,
            "rendered": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Drag and drop a lane to get started",
              "className": "c-popup__action",
            },
            "ref": null,
            "rendered": "Drag and drop a lane to get started",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "content": "Got it",
              "handleClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Popup> renders on each step 2`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Popup
    handleStepUpdate={[Function]}
    step={2}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="c-popup__container"
      >
        <button
          className="c-popup__close"
          onClick={[Function]}
          type="button"
        />
        <img
          alt=""
          className="c-popup__image"
          src="add-lane.svg"
        />
        <div
          className="c-popup__title"
        >
          We'll start with a lane
        </div>
        <div
          className="c-popup__content"
        >
          Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
        </div>
        <div
          className="c-popup__action"
        >
          Drag and drop a lane to get started
        </div>
        <Popup
          content="Got it"
          handleClick={[Function]}
        />
      </div>,
      "className": "c-popup is-hidden c-popup--bar-steps",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />,
          <img
            alt=""
            className="c-popup__image"
            src="add-lane.svg"
          />,
          <div
            className="c-popup__title"
          >
            We'll start with a lane
          </div>,
          <div
            className="c-popup__content"
          >
            Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
          </div>,
          <div
            className="c-popup__action"
          >
            Drag and drop a lane to get started
          </div>,
          <Popup
            content="Got it"
            handleClick={[Function]}
          />,
        ],
        "className": "c-popup__container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "c-popup__close",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "",
            "className": "c-popup__image",
            "src": "add-lane.svg",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "We'll start with a lane",
            "className": "c-popup__title",
          },
          "ref": null,
          "rendered": "We'll start with a lane",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
            "className": "c-popup__content",
          },
          "ref": null,
          "rendered": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Drag and drop a lane to get started",
            "className": "c-popup__action",
          },
          "ref": null,
          "rendered": "Drag and drop a lane to get started",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": "Got it",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="c-popup__container"
        >
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />
          <img
            alt=""
            className="c-popup__image"
            src="add-lane.svg"
          />
          <div
            className="c-popup__title"
          >
            We'll start with a lane
          </div>
          <div
            className="c-popup__content"
          >
            Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
          </div>
          <div
            className="c-popup__action"
          >
            Drag and drop a lane to get started
          </div>
          <Popup
            content="Got it"
            handleClick={[Function]}
          />
        </div>,
        "className": "c-popup is-hidden c-popup--bar-steps",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="c-popup__close"
              onClick={[Function]}
              type="button"
            />,
            <img
              alt=""
              className="c-popup__image"
              src="add-lane.svg"
            />,
            <div
              className="c-popup__title"
            >
              We'll start with a lane
            </div>,
            <div
              className="c-popup__content"
            >
              Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.
            </div>,
            <div
              className="c-popup__action"
            >
              Drag and drop a lane to get started
            </div>,
            <Popup
              content="Got it"
              handleClick={[Function]}
            />,
          ],
          "className": "c-popup__container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "c-popup__close",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "",
              "className": "c-popup__image",
              "src": "add-lane.svg",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "We'll start with a lane",
              "className": "c-popup__title",
            },
            "ref": null,
            "rendered": "We'll start with a lane",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
              "className": "c-popup__content",
            },
            "ref": null,
            "rendered": "Lanes represent high level categories, such as teams, product lines, or strategic initiatives. Add a color and description to your lane to communicate valuable details to stakeholders.",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Drag and drop a lane to get started",
              "className": "c-popup__action",
            },
            "ref": null,
            "rendered": "Drag and drop a lane to get started",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "content": "Got it",
              "handleClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Popup> renders on each step 3`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Popup
    handleStepUpdate={[Function]}
    step={3}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="c-popup__container"
      >
        <button
          className="c-popup__close"
          onClick={[Function]}
          type="button"
        />
        <img
          alt=""
          className="c-popup__image"
          src="add-bar.svg"
        />
        <div
          className="c-popup__title"
        >
          Awesome! Now let's add a few bars.
        </div>
        <div
          className="c-popup__content"
        >
          Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.
        </div>
        <div
          className="c-popup__action"
        >
          Drag and drop a bar to get started
        </div>
        <Popup
          content="Got it"
          handleClick={[Function]}
        />
      </div>,
      "className": "c-popup is-hidden c-popup--bar-steps",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />,
          <img
            alt=""
            className="c-popup__image"
            src="add-bar.svg"
          />,
          <div
            className="c-popup__title"
          >
            Awesome! Now let's add a few bars.
          </div>,
          <div
            className="c-popup__content"
          >
            Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.
          </div>,
          <div
            className="c-popup__action"
          >
            Drag and drop a bar to get started
          </div>,
          <Popup
            content="Got it"
            handleClick={[Function]}
          />,
        ],
        "className": "c-popup__container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "c-popup__close",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "",
            "className": "c-popup__image",
            "src": "add-bar.svg",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Awesome! Now let's add a few bars.",
            "className": "c-popup__title",
          },
          "ref": null,
          "rendered": "Awesome! Now let's add a few bars.",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.",
            "className": "c-popup__content",
          },
          "ref": null,
          "rendered": "Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Drag and drop a bar to get started",
            "className": "c-popup__action",
          },
          "ref": null,
          "rendered": "Drag and drop a bar to get started",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": "Got it",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="c-popup__container"
        >
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />
          <img
            alt=""
            className="c-popup__image"
            src="add-bar.svg"
          />
          <div
            className="c-popup__title"
          >
            Awesome! Now let's add a few bars.
          </div>
          <div
            className="c-popup__content"
          >
            Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.
          </div>
          <div
            className="c-popup__action"
          >
            Drag and drop a bar to get started
          </div>
          <Popup
            content="Got it"
            handleClick={[Function]}
          />
        </div>,
        "className": "c-popup is-hidden c-popup--bar-steps",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="c-popup__close"
              onClick={[Function]}
              type="button"
            />,
            <img
              alt=""
              className="c-popup__image"
              src="add-bar.svg"
            />,
            <div
              className="c-popup__title"
            >
              Awesome! Now let's add a few bars.
            </div>,
            <div
              className="c-popup__content"
            >
              Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.
            </div>,
            <div
              className="c-popup__action"
            >
              Drag and drop a bar to get started
            </div>,
            <Popup
              content="Got it"
              handleClick={[Function]}
            />,
          ],
          "className": "c-popup__container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "c-popup__close",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "",
              "className": "c-popup__image",
              "src": "add-bar.svg",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Awesome! Now let's add a few bars.",
              "className": "c-popup__title",
            },
            "ref": null,
            "rendered": "Awesome! Now let's add a few bars.",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.",
              "className": "c-popup__content",
            },
            "ref": null,
            "rendered": "Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Drag and drop a bar to get started",
              "className": "c-popup__action",
            },
            "ref": null,
            "rendered": "Drag and drop a bar to get started",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "content": "Got it",
              "handleClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Popup> renders on each step 4`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Popup
    handleStepUpdate={[Function]}
    step={4}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="c-popup__container"
      >
        <button
          className="c-popup__close"
          onClick={[Function]}
          type="button"
        />
        <img
          alt=""
          className="c-popup__image"
          src="add-bar.svg"
        />
        <div
          className="c-popup__title"
        >
          Awesome! Now let's add a few bars.
        </div>
        <div
          className="c-popup__content"
        >
          Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.
        </div>
        <div
          className="c-popup__action"
        >
          Drag and drop a bar to get started
        </div>
        <Popup
          content="Got it"
          handleClick={[Function]}
        />
      </div>,
      "className": "c-popup is-hidden c-popup--bar-steps",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />,
          <img
            alt=""
            className="c-popup__image"
            src="add-bar.svg"
          />,
          <div
            className="c-popup__title"
          >
            Awesome! Now let's add a few bars.
          </div>,
          <div
            className="c-popup__content"
          >
            Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.
          </div>,
          <div
            className="c-popup__action"
          >
            Drag and drop a bar to get started
          </div>,
          <Popup
            content="Got it"
            handleClick={[Function]}
          />,
        ],
        "className": "c-popup__container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "c-popup__close",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "alt": "",
            "className": "c-popup__image",
            "src": "add-bar.svg",
          },
          "ref": null,
          "rendered": null,
          "type": "img",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Awesome! Now let's add a few bars.",
            "className": "c-popup__title",
          },
          "ref": null,
          "rendered": "Awesome! Now let's add a few bars.",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.",
            "className": "c-popup__content",
          },
          "ref": null,
          "rendered": "Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Drag and drop a bar to get started",
            "className": "c-popup__action",
          },
          "ref": null,
          "rendered": "Drag and drop a bar to get started",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": "Got it",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="c-popup__container"
        >
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />
          <img
            alt=""
            className="c-popup__image"
            src="add-bar.svg"
          />
          <div
            className="c-popup__title"
          >
            Awesome! Now let's add a few bars.
          </div>
          <div
            className="c-popup__content"
          >
            Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.
          </div>
          <div
            className="c-popup__action"
          >
            Drag and drop a bar to get started
          </div>
          <Popup
            content="Got it"
            handleClick={[Function]}
          />
        </div>,
        "className": "c-popup is-hidden c-popup--bar-steps",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="c-popup__close"
              onClick={[Function]}
              type="button"
            />,
            <img
              alt=""
              className="c-popup__image"
              src="add-bar.svg"
            />,
            <div
              className="c-popup__title"
            >
              Awesome! Now let's add a few bars.
            </div>,
            <div
              className="c-popup__content"
            >
              Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.
            </div>,
            <div
              className="c-popup__action"
            >
              Drag and drop a bar to get started
            </div>,
            <Popup
              content="Got it"
              handleClick={[Function]}
            />,
          ],
          "className": "c-popup__container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "c-popup__close",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "",
              "className": "c-popup__image",
              "src": "add-bar.svg",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Awesome! Now let's add a few bars.",
              "className": "c-popup__title",
            },
            "ref": null,
            "rendered": "Awesome! Now let's add a few bars.",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.",
              "className": "c-popup__content",
            },
            "ref": null,
            "rendered": "Bars are your specific initiative. Use them to represent your epics, projects, or taks, and provide an at a glance view of priority, relationships and progress.",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Drag and drop a bar to get started",
              "className": "c-popup__action",
            },
            "ref": null,
            "rendered": "Drag and drop a bar to get started",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "content": "Got it",
              "handleClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Popup> renders on each step 5`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Popup
    handleStepUpdate={[Function]}
    step={5}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="c-popup__container"
      >
        <button
          className="c-popup__close"
          onClick={[Function]}
          type="button"
        />
        <div
          className="c-popup__title"
        >
          Alright let's set up a couple more
        </div>
        <div
          className="c-popup__content"
        >
          Once they're added, you can share out your roadmap with your team.
        </div>
        <Popup
          content="Got it"
          handleClick={[Function]}
        />
      </div>,
      "className": "c-popup is-hidden c-popup--bar-steps",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />,
          false,
          <div
            className="c-popup__title"
          >
            Alright let's set up a couple more
          </div>,
          <div
            className="c-popup__content"
          >
            Once they're added, you can share out your roadmap with your team.
          </div>,
          false,
          <Popup
            content="Got it"
            handleClick={[Function]}
          />,
        ],
        "className": "c-popup__container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "c-popup__close",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Alright let's set up a couple more",
            "className": "c-popup__title",
          },
          "ref": null,
          "rendered": "Alright let's set up a couple more",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Once they're added, you can share out your roadmap with your team.",
            "className": "c-popup__content",
          },
          "ref": null,
          "rendered": "Once they're added, you can share out your roadmap with your team.",
          "type": "div",
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": "Got it",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="c-popup__container"
        >
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />
          <div
            className="c-popup__title"
          >
            Alright let's set up a couple more
          </div>
          <div
            className="c-popup__content"
          >
            Once they're added, you can share out your roadmap with your team.
          </div>
          <Popup
            content="Got it"
            handleClick={[Function]}
          />
        </div>,
        "className": "c-popup is-hidden c-popup--bar-steps",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="c-popup__close"
              onClick={[Function]}
              type="button"
            />,
            false,
            <div
              className="c-popup__title"
            >
              Alright let's set up a couple more
            </div>,
            <div
              className="c-popup__content"
            >
              Once they're added, you can share out your roadmap with your team.
            </div>,
            false,
            <Popup
              content="Got it"
              handleClick={[Function]}
            />,
          ],
          "className": "c-popup__container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "c-popup__close",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Alright let's set up a couple more",
              "className": "c-popup__title",
            },
            "ref": null,
            "rendered": "Alright let's set up a couple more",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Once they're added, you can share out your roadmap with your team.",
              "className": "c-popup__content",
            },
            "ref": null,
            "rendered": "Once they're added, you can share out your roadmap with your team.",
            "type": "div",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "content": "Got it",
              "handleClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<Popup> updates message 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Popup
    handleStepUpdate={[Function]}
    step={5}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="c-popup__container"
      >
        <button
          className="c-popup__close"
          onClick={[Function]}
          type="button"
        />
        <div
          className="c-popup__title"
        >
          Alright let's set up a couple more
        </div>
        <div
          className="c-popup__content"
        >
          Once they're added, you can share out your roadmap with your team.
        </div>
        <Popup
          content="Got it"
          handleClick={[Function]}
        />
      </div>,
      "className": "c-popup is-hidden c-popup--bar-steps",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />,
          false,
          <div
            className="c-popup__title"
          >
            Alright let's set up a couple more
          </div>,
          <div
            className="c-popup__content"
          >
            Once they're added, you can share out your roadmap with your team.
          </div>,
          false,
          <Popup
            content="Got it"
            handleClick={[Function]}
          />,
        ],
        "className": "c-popup__container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "c-popup__close",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": null,
          "type": "button",
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Alright let's set up a couple more",
            "className": "c-popup__title",
          },
          "ref": null,
          "rendered": "Alright let's set up a couple more",
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Once they're added, you can share out your roadmap with your team.",
            "className": "c-popup__content",
          },
          "ref": null,
          "rendered": "Once they're added, you can share out your roadmap with your team.",
          "type": "div",
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "content": "Got it",
            "handleClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="c-popup__container"
        >
          <button
            className="c-popup__close"
            onClick={[Function]}
            type="button"
          />
          <div
            className="c-popup__title"
          >
            Alright let's set up a couple more
          </div>
          <div
            className="c-popup__content"
          >
            Once they're added, you can share out your roadmap with your team.
          </div>
          <Popup
            content="Got it"
            handleClick={[Function]}
          />
        </div>,
        "className": "c-popup is-hidden c-popup--bar-steps",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <button
              className="c-popup__close"
              onClick={[Function]}
              type="button"
            />,
            false,
            <div
              className="c-popup__title"
            >
              Alright let's set up a couple more
            </div>,
            <div
              className="c-popup__content"
            >
              Once they're added, you can share out your roadmap with your team.
            </div>,
            false,
            <Popup
              content="Got it"
              handleClick={[Function]}
            />,
          ],
          "className": "c-popup__container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "c-popup__close",
              "onClick": [Function],
              "type": "button",
            },
            "ref": null,
            "rendered": null,
            "type": "button",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Alright let's set up a couple more",
              "className": "c-popup__title",
            },
            "ref": null,
            "rendered": "Alright let's set up a couple more",
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Once they're added, you can share out your roadmap with your team.",
              "className": "c-popup__content",
            },
            "ref": null,
            "rendered": "Once they're added, you can share out your roadmap with your team.",
            "type": "div",
          },
          false,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "content": "Got it",
              "handleClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
